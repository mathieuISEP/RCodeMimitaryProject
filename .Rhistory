a = table(1,2,4,6,8,10)
a
a
cl
#----------------------Correction TD5
Auto=read.table("Auto.txt",header = T,sep=";")
attach(Auto)
mpg01 = rep(0, length(mpg))
mpg01[mpg > median(mpg)] = 1
Auto = data.frame(Auto, mpg01)
summary(Auto)
cor(Auto[,-9])
pairs(Auto)
train = (year%%2 == 0)  # if the year is even
test = !train
Auto.train = Auto[train, ]
Auto.test = Auto[test, ]
mpg01.test = mpg01[test]
#LDA
library(MASS)
lda.fit = lda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, subset = train)
lda.pred = predict(lda.fit, Auto.test)
mean(lda.pred$class != mpg01.test)
table(lda.pred$class,mpg01.test)
#QDA
qda.fit = qda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, subset = train)
qda.pred = predict(qda.fit, Auto.test)
mean(qda.pred$class != mpg01.test)
table(qda.pred$class,mpg01.test)
#----ROC LDA
install.packages("pROC")
library(pROC)
lda.probs=lda.pred$posterior[,1]
ROC.lda=roc(mpg01.test,lda.probs,levels=c(1,0))
plot.roc(ROC.lda,print.auc = T,xlab="1-Specificity",col="red",axes=T)
#----ROC QDA
qda.probs=qda.pred$posterior[,1]
ROC.qda=roc(mpg01.test,qda.probs,levels=c(1,0))
plot.roc(ROC.qda,print.auc = T,xlab="1-Specificity",col="red",axes=T)
#----------------------Correction TD5
Auto=read.table("Auto.txt",header = T,sep=";")
attach(Auto)
mpg01 = rep(0, length(mpg))
mpg01[mpg > median(mpg)] = 1
Auto = data.frame(Auto, mpg01)
summary(Auto)
cor(Auto[,-9])
pairs(Auto)
train = (year%%2 == 0)  # if the year is even
test = !train
Auto.train = Auto[train, ]
Auto.test = Auto[test, ]
mpg01.test = mpg01[test]
#LDA
library(MASS)
lda.fit = lda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, subset = train)
lda.pred = predict(lda.fit, Auto.test)
mean(lda.pred$class != mpg01.test)
table(lda.pred$class,mpg01.test)
#QDA
qda.fit = qda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, subset = train)
qda.pred = predict(qda.fit, Auto.test)
mean(qda.pred$class != mpg01.test)
table(qda.pred$class,mpg01.test)
#----ROC LDA
install.packages("pROC")
library(pROC)
lda.probs=lda.pred$posterior[,1]
ROC.lda=roc(mpg01.test,lda.probs,levels=c(1,0))
plot.roc(ROC.lda,print.auc = T,xlab="1-Specificity",col="red",axes=T)
#----ROC QDA
qda.probs=qda.pred$posterior[,1]
ROC.qda=roc(mpg01.test,qda.probs,levels=c(1,0))
plot.roc(ROC.qda,print.auc = T,xlab="1-Specificity",col="red",axes=T)
install.packages("pROC")
setwd("~/ISEP/A3-BI/Projet_fin_de_parcours/RVisualization")
shipTrajectory <- function (shipId,dataset){
x <- shipId
#dataset <- read.csv(dataFile,sep=",", header=TRUE)
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
boatPosition = dt[which(dt$sourceMmsi == x),]
latlong=c()
for (i in 1:(nrow(boatPosition)-1)){
lat1 = boatPosition$Latitude[i]
long1 = boatPosition$Longitude[i]
lat2 = boatPosition$Latitude[i+1]
long2 = boatPosition$Longitude[i+1]
latlong=c(latlong,earthDist(lat1,long1,lat2,long2))
i <- i + 1
}
return(data.frame(latlong))
}
earthDist <- function (lat1,long1,lat2,long2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
#chargement du fichier
output=read.csv("outputtry.txt", sep=",", header=FALSE)
#création de la colonne NumberTypeMessage
output["NumberTypeMessage"]<- NA
#Nomenclature des différents types de messages
output$`NumberTypeMessage`[output$V1=="PositionReportClassAScheduled{messageType=PositionReportClassAScheduled}"]=1
output$`NumberTypeMessage`[output$V1=="PositionReportClassAResponseToInterrogation{messageType=PositionReportClassAResponseToInterrogation}"]=2
output$`NumberTypeMessage`[output$V1=="StandardClassBCSPositionReport{messageType=StandardClassBCSPositionReport"]=3
output$`NumberTypeMessage`[output$V1=="ShipAndVoyageData{messageType=ShipAndVoyageRelatedData"]=4
output$`NumberTypeMessage`[output$V1=="BaseStationReport{messageType=BaseStationReport"]=5
output$`NumberTypeMessage`[output$V1=="PositionReportClassAAssignedSchedule{messageType=PositionReportClassAAssignedSchedule}"]=6
output$`NumberTypeMessage`[output$V1=="AidToNavigationReport{messageType=AidToNavigationReport"]=7
output$`NumberTypeMessage`[output$V1=="ExtendedClassBEquipmentPositionReport{messageType=ExtendedClassBEquipmentPositionReport"]=8
output$`NumberTypeMessage`[output$V1=="DataLinkManagement{messageType=DataLinkManagement"]=9
output$`NumberTypeMessage`[output$V1=="BinaryBroadcastMessage{messageType=BinaryBroadcastMessage"]=10
output$`NumberTypeMessage`[output$V1=="GNSSBinaryBroadcastMessage{messageType=GNSSBinaryBroadcastMessage"]=11
output$`NumberTypeMessage`[output$V1=="AddressedBinaryMessage{messageType=AddressedBinaryMessage"]=12
output$`NumberTypeMessage`[output$V1=="UTCAndDateInquiry{messageType=UTCAndDateInquiry"]=13
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=14
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=15
output$`NumberTypeMessage`[output$V1=="ClassBCSStaticDataReport{messageType=ClassBCSStaticDataReport"]=16
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=17
output$`NumberTypeMessage`[output$V1=="UTCAndDateResponse{messageType=UTCAndDateResponse"]=18
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=19
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=20
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=21
output <- output[,c(39,1:38)]
attach(output)
#Tri par type
output1 = output[which(NumberTypeMessage == 1),]
output2 = output[which(NumberTypeMessage == 2),]
output3 = output[which(NumberTypeMessage == 3),]
output4 = output[which(NumberTypeMessage == 4),]
output5 = output[which(NumberTypeMessage == 5),]
output6 = output[which(NumberTypeMessage == 6),]
output7 = output[which(NumberTypeMessage == 7),]
output8 = output[which(NumberTypeMessage == 8),]
#traitement des colonnes par type de message
# pour les messages de type 1
#suprression des éléments inutiles dans les colonnes
for (i in c(2:12,20:23)) {
output1[,i]=gsub("^.*?=","", output1[,i])
}
output1$V23=gsub("[[:punct:][:lower:][:upper:]]","", output1$V23)
#nomenclature des colonnes
colnames(output1) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output1 = output1[,-c(21,22,25:39)]
# pour les messages de type 2
#suprression des éléments inutiles dans les colonnes
for (i in c(2:12,20:23)) {
output2[,i]=gsub("^.*?=","", output2[,i])
}
output2$V23=gsub("[[:punct:][:lower:][:upper:]]","", output2$V23)
#nomenclature des colonnes
colnames(output2) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output2 = output2[,-c(21,22,25:39)]
# pour les messages de type 3
#suprression des éléments inutiles dans les colonnes
for (i in c(2:20,27:30)) {
output3[,i]=gsub("^.*?=","", output3[,i])
}
output3$V30=gsub("[[:punct:][:lower:][:upper:]]","", output3$V30)
#nomenclature des colonnes
colnames(output3) <- c("NumberTypeMessage","MessageType", "RegionalReserved1", "SpeedOverGround", "PositionAccurate", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Second", "RegionalReserved2", "CsUnit", "display", "dsc", "band", "message22", "assigned", "raimFlag", "commStateSelectorFlag", "commState", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1","Metadata", "Received","repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output3 = output3[,-c(28,29,32:39)]
# pour les messages de type 4
#suprression des éléments inutiles dans les colonnes
for (i in c(2:15,29:32)) {
output4[,i]=gsub("^.*?=","", output4[,i])
}
output4$V32=gsub("[[:punct:][:lower:][:upper:]]","", output4$V32)
#nomenclature des colonnes
colnames(output4) <- c("NumberTypeMessage","MessageType", "imo", "callsign", "shipname", "shipType","toBow","toStern","toStarboard","toPort","positionFixingDevice","eta","draught","destination","dataTerminalReady","AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1","NMEAMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output4 = output4[,-c(30,31,34:39)]
#new_DF <- output[rowSums(is.na(output)) > 0,] #A compléter pour numbertypemessage
#changement de type des variables (string à numérique)
output1$Timestamp=as.numeric(output1$Timestamp)
output1$sourceMmsi=as.numeric(output1$sourceMmsi)
output1$Latitude = as.numeric(output1$Latitude)
output1$Longitude = as.numeric(output1$Longitude)
output2$Latitude = as.numeric(output2$Latitude)
output2$Longitude = as.numeric(output2$Longitude)
attach(output1)
lat = output2$Latitude
lon = output2$Longitude
#library(fpc)
DBSCAN = dbscan(cbind(lat, lon), eps = 10, MinPts = 3)
plot(lon, lat, col = DBSCAN$cluster, pch = 20)
for (i in 1:5){
km.out= kmeans(cbind(lat, lon),i,nstart = 20)
plot(km.out)
}
a = output1[which(output1$sourceMmsi == 211511850),]
#a = a[order(a$Timestamp),]
shipTrajectory(227006760,output1)
#install.packages("rworldmap")
#install.packages("rworldxtra")
#library(rworldmap)
#library(rworldxtra)
bb = qbbox(lat = a$Latitude,lon = a$Longitude)
map = GetMap.bbox(bb$lonR,bb$latR,destfile = "cartographie.png",maptype="hybrid")
PlotOnStaticMap(map,lat=a$Latitude,lon = a$Longitude,destfile = "cartographie.png",cex=2,pch=20)
newmap <- getMap(resolution = "high")
plot(newmap,xlim = c(-180,180), ylim = c(-180,180), asp = 1)
lat = output2$Latitude
lon = output2$Longitude
table = cbind(lat,lon)
#K-means
#library(clusterSim)
for (i in 2:10){
km.out = kmeans(table,i,nstart = 20)
#k = c('K-Means Clustering Results with K=',i)
plot(newmap,xlim = c(-180,180), ylim = c(-180,180), asp = 1)
points(lon,lat,col=(km.out$cluster+1), pch=20,cex=2)
print(index.DB(table,km.out$cluster)$DB)
invisible(readline(prompt="Press [enter] to continue"))
}
#DBSCAN
DBSCAN = dbscan(table, eps = 10, MinPts = 3)
points(lon,lat,col=DBSCAN$cluster,cex=1,pch=20)
plot(newmap,xlim = c(0, 1), ylim = c(48, 50), asp = 1)
points(a$Longitude,a$Latitude,col="red",cex=1,pch=20)
#Travail sur trajectoire des bateaux
ab=shipTrajectory(227006760,output1)
write.table(b,"test.txt",sep="",row.names=FALSE)
boatpositiontest <-output1[,c(22,7,8)]
#attach(boatpositiontest)
boatposition[sort(boatposition$sourceMmsi)]
boatposition[order(rank(sourceMmsi),Latitude)]
shipTrajectory(227006760,output1)
BoatsTrajectories <- function (dataset){
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
UniqueBoatPosition =  dt[!duplicated(dt$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
Traject=data.frame()
for (i in 1:(nrow(UniqueBoatID))){
Traject = rbind(UniqueBoatID,shipTrajectory(UniqueBoatID$sourceMmsi[i],dt))
i <- i + 1
}
return(data.frame(Traject))
}
dt = output1
UniqueBoatPosition =  dt[!duplicated(dt$sourceMmsi),,drop=F]
View(UniqueBoatPosition)
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
View(UniqueBoatID)
Traject=data.frame("sourceMmsi")
View(Traject)
Traject=data.frame("sourceMmsi",drop=F)
View(Traject)
Traject=data.frame(sourceMmsi)
View(Traject)
Traject=data.frame(Mmsi)
Traject=data.frame("Mmsi")
View(Traject)
Traject=data.frame(sourceMmsi=integer())
View(Traject)
View(UniqueBoatID)
UniqueBoatID = append(shipTrajectory(UniqueBoatID$sourceMmsi[1],dt))
UniqueBoatID = append(UniqueBoatID,shipTrajectory(UniqueBoatID$sourceMmsi[1],dt))
UniqueBoatID = append(UniqueBoatID,shipTrajectory(UniqueBoatID$sourceMmsi[3],dt))
View(UniqueBoatID)
UniqueBoatID = append(UniqueBoatID,shipTrajectory(UniqueBoatID$sourceMmsi[4],dt))
View(UniqueBoatID)
UniqueBoatID = UniqueBoatPosition[c("sourceMmsi"),,drop = F]
View(UniqueBoatID)
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatID = rbind(UniqueBoatID,shipTrajectory(UniqueBoatID$sourceMmsi[4],dt))
UniqueBoatID = cbind(UniqueBoatID,shipTrajectory(UniqueBoatID$sourceMmsi[4],dt))
Traject<- data.frame(matrix(0, ncol = nrow(UniqueBoatID), nrow = 20))
View(Traject)
Traject<- data.frame(matrix(0, ncol = length(UniqueBoatID), nrow = 20))
View(Traject)
Traject<- data.frame(matrix(0, ncol = nrow(UniqueBoatID), nrow = 20))
Traject = rbind(Traject,shipTrajectory(UniqueBoatID$sourceMmsi[1],dt))
BoatsTrajectories <- function (dataset){
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
UniqueBoatPosition =  dt[!duplicated(dt$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
Traject<- data.frame(matrix(0, ncol = nrow(UniqueBoatID), nrow = 20))
for (i in 1:(length(Traject))){
Traject = rbind(Traject,shipTrajectory(UniqueBoatID$sourceMmsi[i],dt))
i <- i + 1
}
return(data.frame(UniqueBoatID))
}
BoatsTrajectories(output1)
UniqueBoatPosition =  dt[!duplicated(dt$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
View(UniqueBoatID)
Traject = rbind(Traject,shipTrajectory(UniqueBoatID$sourceMmsi[i],dt))
Traject<- as.data.frame(matrix(0, ncol = nrow(UniqueBoatID), nrow = 20))
View(Traject)
View(output1)
