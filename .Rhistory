BoatsTrajectories <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
rownames(UniqueBoatID)<-(UniqueBoatID[,1])
UniqueBoatID<-(UniqueBoatID[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = cbind(UniqueBoatID[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
rownames(UniqueBoatID)<-(UniqueBoatID[,1])
UniqueBoatID<-(UniqueBoatID[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = cbind(UniqueBoatID[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
BoatsTrajectories <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIdColumned <- as.data.frame(t(UniqueBoatID))
colnames(UniqueBoatIdColumned)<-(UniqueBoatIdColumned[1,])
UniqueBoatIdColumned<-(UniqueBoatIdColumned[-c(1), ])
for (i in 1:length(UniqueBoatIdColumned)){
Allboatstrajectoriesloop = rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(as.data.frame(Allboatstrajectories))
}
qqqq=BoatsTrajectoriesrow(output1)
UniqueBoatID[,1]
UniqueBoatID[1,]
UniqueBoatIdColumnedtry = rbind(UniqueBoatIdColumned[,2],shipTrajectory(UniqueBoatID$sourceMmsi[2],output1))
View(UniqueBoatIdColumnedtest)
View(UniqueBoatIdColumned)
View(UniqueBoatIdColumnedtry)
Allboatstrajectoriesloop = cbind(UniqueBoatID[,1],shipTrajectory(UniqueBoatID$sourceMmsi[1],dt2))
Allboatstrajectoriesloop = cbind(UniqueBoatID[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],dt2))
Allboatstrajectoriesloop = cbind(UniqueBoatID[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
View(Allboatstrajectoriesloop)
View(Allboatstrajectoriesloop)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
rownames(UniqueBoatID)<-(UniqueBoatID[,1])
UniqueBoatID<-(UniqueBoatID[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = cbind(UniqueBoatID[i,],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
qqqq=BoatsTrajectoriesrow(output1)
BoatsTrajectories <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIdColumned <- as.data.frame(t(UniqueBoatID))
colnames(UniqueBoatIdColumned)<-(UniqueBoatIdColumned[1,])
UniqueBoatIdColumned<-(UniqueBoatIdColumned[-c(1), ])
for (i in 1:5){
Allboatstrajectoriesloop = rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(as.data.frame(Allboatstrajectories))
}
qqq=BoatsTrajectories(output1)
BoatsTrajectories <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIdColumned <- as.data.frame(t(UniqueBoatID))
colnames(UniqueBoatIdColumned)<-(UniqueBoatIdColumned[1,])
UniqueBoatIdColumned<-(UniqueBoatIdColumned[-c(1), ])
for (i in 1:5){
Allboatstrajectoriesloop = rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
qqq=BoatsTrajectories(output1)
UniqueBoatIdrowtry = cbind(UniqueBoatID[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
View(UniqueBoatIdrowtry)
shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatID<-(UniqueBoatIDrow[,-c(1) ])
View(UniqueBoatIDrow)
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
View(UniqueBoatIDrow)
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
View(UniqueBoatIDrow)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = cbind(UniqueBoatID[i,],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)
UniqueBoatIdrowtry = cbind(UniqueBoatID[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
View(UniqueBoatIdrowtry)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = cbind(UniqueBoatIDrow[i,],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
UniqueBoatIdrowtry = cbind(UniqueBoatIDrow[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
View(ab)
View(ab)
UniqueBoatIdrowtry = cbind(UniqueBoatIDrow[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
UniqueBoatIdrowtry = =rbind(UniqueBoatIDrow[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
UniqueBoatIdrowtry = rbind(UniqueBoatIDrow[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
View(UniqueBoatIdrowtry)
View(UniqueBoatIdrowtry)
UniqueBoatIdrowtry = cbind(UniqueBoatIDrow[1,],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
UniqueBoatIdrowtry = cbind(UniqueBoatIDrow[,1],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
abb=t(shipTrajectory(227006760,output1))
View(abb)
UniqueBoatIdrowtry = cbind(UniqueBoatIDrow[1,],t(shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)))
View(UniqueBoatIdrowtry)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = cbind(UniqueBoatIDrow[i,],t(shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2)))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(as.data.frame(Allboatstrajectories))
}
qqqq=BoatsTrajectoriesrow(output1)
View(qqqq)
UniqueBoatIdrowtry = cbind(UniqueBoatIDrow[1,],t(shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)))
View(UniqueBoatIdrowtry)
View(qqqq)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = cbind(UniqueBoatIDrow[i,],t(shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2)))
Allboatstrajectories = data.frame(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
qqqq=BoatsTrajectoriesrow(output1)
View(abb)
UniqueBoatIdrowtry = rbind(UniqueBoatIDrow[1,],t(shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)))
View(UniqueBoatIdrowtry)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = rbind(UniqueBoatIDrow[i,],t(shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2)))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
qqqq=BoatsTrajectoriesrow(output1)
BoatsTrajectoriesrow(output1)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = rbind(UniqueBoatIDrow[i,],t(shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2)))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(as.data.frame(Allboatstrajectories))
}
qqqq=BoatsTrajectoriesrow(output1)
View(qqqq)
View(UniqueBoatIdrowtry)
abb=t(shipTrajectory(227006760,output1))
shipTrajectory(227006760,output1)
qqq=BoatsTrajectories(output1)
View(ab)
View(UniqueBoatID)
setwd("C:/Users/Folco/Desktop/Isep - Exposé/Isep 5ème année/Projet codeR/RCodeMimitaryProject")
#set your working directory
#chargement du fichier
output=read.csv("outputtry.txt", sep=",", header=FALSE)
#création de la colonne NumberTypeMessage
output["NumberTypeMessage"]<- NA
#Nomenclature des différents types de messages
output$`NumberTypeMessage`[output$V1=="PositionReportClassAScheduled{messageType=PositionReportClassAScheduled}"]=1
output$`NumberTypeMessage`[output$V1=="PositionReportClassAResponseToInterrogation{messageType=PositionReportClassAResponseToInterrogation}"]=2
output$`NumberTypeMessage`[output$V1=="StandardClassBCSPositionReport{messageType=StandardClassBCSPositionReport"]=3
output$`NumberTypeMessage`[output$V1=="ShipAndVoyageData{messageType=ShipAndVoyageRelatedData"]=4
output$`NumberTypeMessage`[output$V1=="BaseStationReport{messageType=BaseStationReport"]=5
output$`NumberTypeMessage`[output$V1=="PositionReportClassAAssignedSchedule{messageType=PositionReportClassAAssignedSchedule}"]=6
output$`NumberTypeMessage`[output$V1=="AidToNavigationReport{messageType=AidToNavigationReport"]=7
output$`NumberTypeMessage`[output$V1=="ExtendedClassBEquipmentPositionReport{messageType=ExtendedClassBEquipmentPositionReport"]=8
output$`NumberTypeMessage`[output$V1=="DataLinkManagement{messageType=DataLinkManagement"]=9
output$`NumberTypeMessage`[output$V1=="BinaryBroadcastMessage{messageType=BinaryBroadcastMessage"]=10
output$`NumberTypeMessage`[output$V1=="GNSSBinaryBroadcastMessage{messageType=GNSSBinaryBroadcastMessage"]=11
output$`NumberTypeMessage`[output$V1=="AddressedBinaryMessage{messageType=AddressedBinaryMessage"]=12
output$`NumberTypeMessage`[output$V1=="UTCAndDateInquiry{messageType=UTCAndDateInquiry"]=13
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=14
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=15
output$`NumberTypeMessage`[output$V1=="ClassBCSStaticDataReport{messageType=ClassBCSStaticDataReport"]=16
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=17
output$`NumberTypeMessage`[output$V1=="UTCAndDateResponse{messageType=UTCAndDateResponse"]=18
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=19
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=20
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=21
output <- output[,c(39,1:38)]
attach(output)
#Tri par type
output1 = output[which(NumberTypeMessage == 1),]
output2 = output[which(NumberTypeMessage == 2),]
output3 = output[which(NumberTypeMessage == 3),]
output4 = output[which(NumberTypeMessage == 4),]
output5 = output[which(NumberTypeMessage == 5),]
output6 = output[which(NumberTypeMessage == 6),]
output7 = output[which(NumberTypeMessage == 7),]
output8 = output[which(NumberTypeMessage == 8),]
#traitement des colonnes par type de message
# pour les messages de type 1
#suprression des éléments inutiles dans les colonnes
for (i in c(2:12,20:23)) {
output1[,i]=gsub("^.*?=","", output1[,i])
}
output1$V23=gsub("[[:punct:][:lower:][:upper:]]","", output1$V23)
#nomenclature des colonnes
colnames(output1) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output1 = output1[,-c(21,22,25:39)]
# pour les messages de type 2
#suprression des éléments inutiles dans les colonnes
for (i in c(2:12,20:23)) {
output2[,i]=gsub("^.*?=","", output2[,i])
}
output2$V23=gsub("[[:punct:][:lower:][:upper:]]","", output2$V23)
#nomenclature des colonnes
colnames(output2) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output2 = output2[,-c(21,22,25:39)]
# pour les messages de type 3
#suprression des éléments inutiles dans les colonnes
for (i in c(2:20,27:30)) {
output3[,i]=gsub("^.*?=","", output3[,i])
}
output3$V30=gsub("[[:punct:][:lower:][:upper:]]","", output3$V30)
#nomenclature des colonnes
colnames(output3) <- c("NumberTypeMessage","MessageType", "RegionalReserved1", "SpeedOverGround", "PositionAccurate", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Second", "RegionalReserved2", "CsUnit", "display", "dsc", "band", "message22", "assigned", "raimFlag", "commStateSelectorFlag", "commState", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1","Metadata", "Received","repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output3 = output3[,-c(28,29,32:39)]
# pour les messages de type 4
#suprression des éléments inutiles dans les colonnes
for (i in c(2:15,29:32)) {
output4[,i]=gsub("^.*?=","", output4[,i])
}
output4$V32=gsub("[[:punct:][:lower:][:upper:]]","", output4$V32)
#nomenclature des colonnes
colnames(output4) <- c("NumberTypeMessage","MessageType", "imo", "callsign", "shipname", "shipType","toBow","toStern","toStarboard","toPort","positionFixingDevice","eta","draught","destination","dataTerminalReady","AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1","NMEAMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#supression des colonnes inutiles
output4 = output4[,-c(30,31,34:39)]
#new_DF <- output[rowSums(is.na(output)) > 0,] #A compléter pour numbertypemessage
#changement de type des variables (string à numérique)
output1$Timestamp=as.numeric(output1$Timestamp)
output1$sourceMmsi=as.numeric(output1$sourceMmsi)
output1$Latitude = as.numeric(output1$Latitude)
output1$Longitude = as.numeric(output1$Longitude)
attach(output1)
shipTrajectory <- function (shipId,dataset){
x <- shipId
#dataset <- read.csv(dataFile,sep=",", header=TRUE)
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
boatPosition = dt[which(dt$sourceMmsi == x),]
latlong=c()
for (i in 1:(nrow(boatPosition)-1)){
lat1 = boatPosition$Latitude[i]
long1 = boatPosition$Longitude[i]
lat2 = boatPosition$Latitude[i+1]
long2 = boatPosition$Longitude[i+1]
latlong=c(latlong,earthDist(lat1,long1,lat2,long2))
i <- i + 1
}
latlong<-data.frame(latlong)
colnames(latlong)<-x
return(latlong)
}
earthDist <- function (lat1,long1,lat2,long2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
BoatsTrajectories <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIdColumned <- as.data.frame(t(UniqueBoatID))
colnames(UniqueBoatIdColumned)<-(UniqueBoatIdColumned[1,])
UniqueBoatIdColumned<-(UniqueBoatIdColumned[-c(1), ])
for (i in 1:5){
Allboatstrajectoriesloop = rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2))
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(Allboatstrajectories)
}
ab=shipTrajectory(227006760,output1)
View(ab)
qqq=BoatsTrajectories(output1)
UniqueBoatPosition =  output1[!duplicated(output1$sourceMmsi),]
UniqueBoatID <- UniqueBoatPosition[,c(22),drop = F]
UniqueBoatIdColumned <- as.data.frame(t(UniqueBoatID))
colnames(UniqueBoatIdColumned)<-(UniqueBoatIdColumned[1,])
UniqueBoatIdColumned<-(UniqueBoatIdColumned[-c(1), ])
bbb = rbind(UniqueBoatIdColumned[,1],shipTrajectory(UniqueBoatID$sourceMmsi[1],dt))
bbb = rbind(UniqueBoatIdColumned[,1],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1))
View(bbb)
bbb = t(rbind(UniqueBoatIdColumned[,1],shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)))
View(bbb)
as.data.frame(bbb)
bbb=data.frame(bbb)
View(bbb)
for (i in 1:5){
zik = t(rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)))
zouk = c(zouk,zik)
i <- i + 1
}
zouk=c()
for (i in 1:5){
zik = t(rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)))
zouk = c(zouk,zik)
i <- i + 1
}
for (i in 1:5){
zik = t(rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)))
zouk = c(zouk,zik)
i <- i + 1
print(zouk)
}
zouk=c()
for (i in 1:5){
zik = t(rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)))
zouk = data.frame(zouk,zik)
i <- i + 1
}
View(bbb)
zouk=data.frame()
for (i in 1:5){
zik = t(rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)))
zouk = data.frame(zouk,zik)
i <- i + 1
}
zouk=data.frame()
for (i in 1:5){
zik = t(rbind(UniqueBoatIdColumned[,i],shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)))
zouk = cbind(zouk,zik)
i <- i + 1
}
qqq=BoatsTrajectories(output1)
BoatsTrajectoriesrow <- function (dataset){
dt2 = dataset
dt2$Latitude = as.double(dt2$Latitude)
dt2$Longitude = as.double(dt2$Longitude)
Allboatstrajectories=c()
UniqueBoatPosition =  dt2[!duplicated(dt2$sourceMmsi),,drop=F]
UniqueBoatID = UniqueBoatPosition[,c("sourceMmsi"),drop = F]
UniqueBoatIDrow = UniqueBoatID
rownames(UniqueBoatIDrow)<-(UniqueBoatIDrow[,1])
UniqueBoatIDrow<-(UniqueBoatIDrow[,-c(1) ])
for (i in 1:5){
Allboatstrajectoriesloop = shipTrajectory(UniqueBoatID$sourceMmsi[i],dt2)
Allboatstrajectories = c(Allboatstrajectories,Allboatstrajectoriesloop)
i <- i + 1
}
return(as.data.frame(Allboatstrajectories))
}
qqqq=BoatsTrajectoriesrow(output1)
Allboatstrajectoriesloopzzz = shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)
View(Allboatstrajectoriesloopzzz)
Allboatstrajectoriesaz=c()
Allboatstrajectoriesaz = c(Allboatstrajectoriesaz,Allboatstrajectoriesloopzzz)
data.frame(Allboatstrajectoriesaz)
for (i in 1:5){
Allboatstrajectoriesaz=c()
Allboatstrajectoriesloopzzz = shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)
Allboatstrajectoriesaz = c(Allboatstrajectoriesaz,Allboatstrajectoriesloopzzz)
data.frame(Allboatstrajectoriesaz)
i <- i + 1
}
for (i in 1:5){
Allboatstrajectoriesaz=c()
Allboatstrajectoriesloopzzz = shipTrajectory(UniqueBoatID$sourceMmsi[1],output1)
Allboatstrajectoriesaz = c(Allboatstrajectoriesaz,Allboatstrajectoriesloopzzz)
print(data.frame(Allboatstrajectoriesaz))
i <- i + 1
}
View(Allboatstrajectoriesloopzzz)
for (i in 1:5){
Allboatstrajectoriesaz=c()
Allboatstrajectoriesloopzzz = shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)
Allboatstrajectoriesaz = c(Allboatstrajectoriesaz,Allboatstrajectoriesloopzzz)
print(data.frame(Allboatstrajectoriesaz))
i <- i + 1
}
for (i in 1:5){
Allboatstrajectoriesloopzzz = shipTrajectory(UniqueBoatID$sourceMmsi[i],output1)
Allboatstrajectoriesaz = c(Allboatstrajectoriesaz,Allboatstrajectoriesloopzzz)
print(data.frame(Allboatstrajectoriesaz))
i <- i + 1
}
Allboatstrajectoriesaz<-data.frame(Allboatstrajectoriesaz)
qqq=BoatsTrajectories(output1)
BoatsTrajectories(output1)
