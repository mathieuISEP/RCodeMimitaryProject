output3$V14=gsub("^.*?=","", output3$V14)
output3$V15=gsub("^.*?=","", output3$V15)
output3$V16=gsub("^.*?=","", output3$V16)
output3$V17=gsub("^.*?=","", output3$V17)
output3$V18=gsub("^.*?=","", output3$V18)
output3$V19=gsub("^.*?=","", output3$V19)
output3$V20=gsub("^.*?=","", output3$V20)
output3$V27=gsub("^.*?=","", output3$V27)
output3$V28=gsub("^.*?=","", output3$V28)
output3$V29=gsub("^.*?=","", output3$V29)
output3$V30=gsub("[[:punct:][:lower:][:upper:]]","", output3$V30)
colnames(output3) <- c("NumberTypeMessage","MessageType", "RegionalReserved1", "SpeedOverGround", "PositionAccurate", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Second", "RegionalReserved2", "CsUnit", "display", "dsc", "band", "message22", "assigned", "raimFlag", "commStateSelectorFlag", "commState", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1","Metadata", "Received","repeatIndicator", "sourceMmsi")
output3 = output3[,-c(28,29)]
# pour les messages de type 4
output4$V2=gsub("^.*?=","", output4$V2)
output4$V3=gsub("^.*?=","", output4$V3)
output4$V4=gsub("^.*?=","", output4$V4)
output4$V5=gsub("^.*?=","", output4$V5)
output4$V6=gsub("^.*?=","", output4$V6)
output4$V7=gsub("^.*?=","", output4$V7)
output4$V8=gsub("^.*?=","", output4$V8)
output4$V9=gsub("^.*?=","", output4$V9)
output4$V10=gsub("^.*?=","", output4$V10)
output4$V11=gsub("^.*?=","", output4$V11)
output4$V12=gsub("^.*?=","", output4$V12)
output4$V13=gsub("^.*?=","", output4$V13)
output4$V14=gsub("^.*?=","", output4$V14)
output4$V15=gsub("^.*?=","", output4$V15)
output4$V29=gsub("^.*?=","", output4$V29)
output4$V30=gsub("^.*?=","", output4$V30)
output4$V31=gsub("^.*?=","", output4$V31)
output4$V32=gsub("[[:punct:][:lower:][:upper:]]","", output4$V32)
colnames(output4) <- c("NumberTypeMessage","MessageType", "imo", "callsign", "shipname", "shipType","toBow","toStern","toStarboard","toPort","positionFixingDevice","eta","draught","destination","dataTerminalReady","", "", "", "", "", "", "","", "", "", "", "", "", "", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#new_DF <- output[rowSums(is.na(output)) > 0,] #A compléter pour numbertypemessage
output1$Timestamp=as.numeric(output1$Timestamp)
output1$sourceMmsi=as.numeric(output1$sourceMmsi)
>>>>>>> b424f88161884d503b3190214ef9dc77e1c631f2
output1$Latitude = as.double(output1$Latitude)
output1$Longitude = as.double(output1$Longitude)
a = output1[which(output1$sourceMmsi == 227006760),]
<<<<<<< HEAD
shipTrajectory(227006760,output1)
shipTrajectory(205448890,output1)
=======
#a = a[order(a$Timestamp),]
#Calculate Distance from  Latitude and Longitude
#pos1 = (c(output1$Latitude[7],output1$Longitude[7]))
#pos2 = (c(output1$Latitude[8],output1$Longitude[8]))
#earthDist(Latitude[7],Longitude[7],Latitude[8],Longitude[8])
shipTrajectory(227006760,output1)
source('~/ISEP/Année 5/Projet/RCodeMimitaryProject/ScriptMilitaryAI.R')
source('~/ISEP/Année 5/Projet/RCodeMimitaryProject/shipTrajectory.R')
>>>>>>> b424f88161884d503b3190214ef9dc77e1c631f2
shipTrajectory <- function (shipId,dataset){
x <- shipId
#dataset <- read.csv(dataFile,sep=",", header=TRUE)
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
boatPosition = dt[which(dt$sourceMmsi == x),]
attach(boatPosition)
<<<<<<< HEAD
for (i in 1:(length(boatPosition)-2)){
=======
for (i in 1:(length(boatPosition)-1)){
>>>>>>> b424f88161884d503b3190214ef9dc77e1c631f2
lat1 = boatPosition$Latitude[i]
long1 = boatPosition$Longitude[i]
lat2 = boatPosition$Latitude[i+1]
long2 = boatPosition$Longitude[i+1]
i <- i + 1
print(earthDist(lat1,long1,lat2,long2))
}
}
<<<<<<< HEAD
shipTrajectory(205448890,output1)
shipTrajectory <- function (shipId,dataset){
x <- shipId
#dataset <- read.csv(dataFile,sep=",", header=TRUE)
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
boatPosition = dt[which(dt$sourceMmsi == x),]
attach(boatPosition)
for (i in 1:(length(boatPosition)-5)){
lat1 = boatPosition$Latitude[i]
long1 = boatPosition$Longitude[i]
lat2 = boatPosition$Latitude[i+1]
long2 = boatPosition$Longitude[i+1]
i <- i + 1
print(earthDist(lat1,long1,lat2,long2))
}
}
shipTrajectory(205448890,output1)
View(output2)
View(output2)
shipTrajectory(366950460,output2)
attach(output2)
shipTrajectory(366950460,output2)
View(output2)
View(output2)
install.packages("RgoogleMaps")
?RgoogleMaps
bb = qbbox(lat = a$Latitude,lon = a$Longitude)
map = GetMap.bbox(bb$lonR,bb$latR,destfile = "cartographie.png",maptype="hybrid")
PlotOnStaticMap(map,lat=a$Latitude,lon = a$Longitude,destfile = "cartographie.png",cex=2,pch=20)
newmap <- getMap(resolution = "high")
plot(newmap,xlim = c(115, 182), ylim = c(30, 92), asp = 1)
points(a$Longitude,a$Latitude,col="red",cex=1,pch=20)
=======
earthDist <- function (lat1,long1,lat2,long2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
#set your working directory
#output=read.csv("output.txt", sep=",", header=FALSE)
#chargement du fichier
output=read.csv("outputtry.txt", sep=",", header=FALSE)
#création de la colonne NumberTypeMessage
output["NumberTypeMessage"]<- NA
#Nomenclature des différents types de messages
output$`NumberTypeMessage`[output$V1=="PositionReportClassAScheduled{messageType=PositionReportClassAScheduled}"]=1
output$`NumberTypeMessage`[output$V1=="PositionReportClassAResponseToInterrogation{messageType=PositionReportClassAResponseToInterrogation}"]=2
output$`NumberTypeMessage`[output$V1=="StandardClassBCSPositionReport{messageType=StandardClassBCSPositionReport"]=3
output$`NumberTypeMessage`[output$V1=="ShipAndVoyageData{messageType=ShipAndVoyageRelatedData"]=4
output$`NumberTypeMessage`[output$V1=="BaseStationReport{messageType=BaseStationReport"]=5
output$`NumberTypeMessage`[output$V1=="PositionReportClassAAssignedSchedule{messageType=PositionReportClassAAssignedSchedule}"]=6
output$`NumberTypeMessage`[output$V1=="AidToNavigationReport{messageType=AidToNavigationReport"]=7
output$`NumberTypeMessage`[output$V1=="ExtendedClassBEquipmentPositionReport{messageType=ExtendedClassBEquipmentPositionReport"]=8
output$`NumberTypeMessage`[output$V1=="DataLinkManagement{messageType=DataLinkManagement"]=9
output$`NumberTypeMessage`[output$V1=="BinaryBroadcastMessage{messageType=BinaryBroadcastMessage"]=10
output$`NumberTypeMessage`[output$V1=="GNSSBinaryBroadcastMessage{messageType=GNSSBinaryBroadcastMessage"]=11
output$`NumberTypeMessage`[output$V1=="AddressedBinaryMessage{messageType=AddressedBinaryMessage"]=12
output$`NumberTypeMessage`[output$V1=="UTCAndDateInquiry{messageType=UTCAndDateInquiry"]=13
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=14
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=15
output$`NumberTypeMessage`[output$V1=="ClassBCSStaticDataReport{messageType=ClassBCSStaticDataReport"]=16
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=17
output$`NumberTypeMessage`[output$V1=="UTCAndDateResponse{messageType=UTCAndDateResponse"]=18
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=19
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=20
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=21
output <- output[,c(39,1:38)]
#Tri par type
attach(output)
output1 = output[which(NumberTypeMessage == 1),]
output2 = output[which(NumberTypeMessage == 2),]
output3 = output[which(NumberTypeMessage == 3),]
output4 = output[which(NumberTypeMessage == 4),]
output5 = output[which(NumberTypeMessage == 5),]
output6 = output[which(NumberTypeMessage == 6),]
output7 = output[which(NumberTypeMessage == 7),]
output8 = output[which(NumberTypeMessage == 8),]
#traitement des colonnes par type de message
# pour les messages de type 1
output1$V2=gsub("^.*?=","", output1$V2)
output1$V3=gsub("^.*?=","", output1$V3)
output1$V4=gsub("^.*?=","", output1$V4)
output1$V5=gsub("^.*?=","", output1$V5)
output1$V6=gsub("^.*?=","", output1$V6)
output1$V7=gsub("^.*?=","", output1$V7)
output1$V8=gsub("^.*?=","", output1$V8)
output1$V9=gsub("^.*?=","", output1$V9)
output1$V10=gsub("^.*?=","", output1$V10)
output1$V11=gsub("^.*?=","", output1$V11)
output1$V12=gsub("^.*?=","", output1$V12)
output1$V20=gsub("^.*?=","", output1$V20)
output1$V21=gsub("^.*?=","", output1$V21)
output1$V22=gsub("^.*?=","", output1$V22)
output1$V23=gsub("[[:punct:][:lower:][:upper:]]","", output1$V23)
colnames(output1) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
output1 = output1[,-c(21,22,25:39)]
# pour les messages de type 2
output2$V2=gsub("^.*?=","", output2$V2)
output2$V3=gsub("^.*?=","", output2$V3)
output2$V4=gsub("^.*?=","", output2$V4)
output2$V5=gsub("^.*?=","", output2$V5)
output2$V6=gsub("^.*?=","", output2$V6)
output2$V7=gsub("^.*?=","", output2$V7)
output2$V8=gsub("^.*?=","", output2$V8)
output2$V9=gsub("^.*?=","", output2$V9)
output2$V10=gsub("^.*?=","", output2$V10)
output2$V11=gsub("^.*?=","", output2$V11)
output2$V12=gsub("^.*?=","", output2$V12)
output2$V20=gsub("^.*?=","", output2$V20)
output2$V21=gsub("^.*?=","", output2$V21)
output2$V22=gsub("^.*?=","", output2$V22)
output2$V23=gsub("[[:punct:][:lower:][:upper:]]","", output2$V23)
colnames(output2) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
output2 = output2[,-c(21,22,25:39)]
# pour les messages de type 3
output3$V2=gsub("^.*?=","", output3$V2)
output3$V3=gsub("^.*?=","", output3$V3)
output3$V4=gsub("^.*?=","", output3$V4)
output3$V5=gsub("^.*?=","", output3$V5)
output3$V6=gsub("^.*?=","", output3$V6)
output3$V7=gsub("^.*?=","", output3$V7)
output3$V8=gsub("^.*?=","", output3$V8)
output3$V9=gsub("^.*?=","", output3$V9)
output3$V10=gsub("^.*?=","", output3$V10)
output3$V11=gsub("^.*?=","", output3$V11)
output3$V12=gsub("^.*?=","", output3$V12)
output3$V13=gsub("^.*?=","", output3$V13)
output3$V14=gsub("^.*?=","", output3$V14)
output3$V15=gsub("^.*?=","", output3$V15)
output3$V16=gsub("^.*?=","", output3$V16)
output3$V17=gsub("^.*?=","", output3$V17)
output3$V18=gsub("^.*?=","", output3$V18)
output3$V19=gsub("^.*?=","", output3$V19)
output3$V20=gsub("^.*?=","", output3$V20)
output3$V27=gsub("^.*?=","", output3$V27)
output3$V28=gsub("^.*?=","", output3$V28)
output3$V29=gsub("^.*?=","", output3$V29)
output3$V30=gsub("[[:punct:][:lower:][:upper:]]","", output3$V30)
colnames(output3) <- c("NumberTypeMessage","MessageType", "RegionalReserved1", "SpeedOverGround", "PositionAccurate", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Second", "RegionalReserved2", "CsUnit", "display", "dsc", "band", "message22", "assigned", "raimFlag", "commStateSelectorFlag", "commState", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1","Metadata", "Received","repeatIndicator", "sourceMmsi")
output3 = output3[,-c(28,29)]
# pour les messages de type 4
output4$V2=gsub("^.*?=","", output4$V2)
output4$V3=gsub("^.*?=","", output4$V3)
output4$V4=gsub("^.*?=","", output4$V4)
output4$V5=gsub("^.*?=","", output4$V5)
output4$V6=gsub("^.*?=","", output4$V6)
output4$V7=gsub("^.*?=","", output4$V7)
output4$V8=gsub("^.*?=","", output4$V8)
output4$V9=gsub("^.*?=","", output4$V9)
output4$V10=gsub("^.*?=","", output4$V10)
output4$V11=gsub("^.*?=","", output4$V11)
output4$V12=gsub("^.*?=","", output4$V12)
output4$V13=gsub("^.*?=","", output4$V13)
output4$V14=gsub("^.*?=","", output4$V14)
output4$V15=gsub("^.*?=","", output4$V15)
output4$V29=gsub("^.*?=","", output4$V29)
output4$V30=gsub("^.*?=","", output4$V30)
output4$V31=gsub("^.*?=","", output4$V31)
output4$V32=gsub("[[:punct:][:lower:][:upper:]]","", output4$V32)
colnames(output4) <- c("NumberTypeMessage","MessageType", "imo", "callsign", "shipname", "shipType","toBow","toStern","toStarboard","toPort","positionFixingDevice","eta","draught","destination","dataTerminalReady","", "", "", "", "", "", "","", "", "", "", "", "", "", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#new_DF <- output[rowSums(is.na(output)) > 0,] #A compléter pour numbertypemessage
output1$Timestamp=as.numeric(output1$Timestamp)
output1$sourceMmsi=as.numeric(output1$sourceMmsi)
output1$Latitude = as.numeric(output1$Latitude)
output1$Longitude = as.numeric(output1$Longitude)
attach(output1)
a = output1[which(output1$sourceMmsi == 227006760),]
#a = a[order(a$Timestamp),]
#Calculate Distance from  Latitude and Longitude
#library(geosphere)
#pos1 = (c(output1$Latitude[7],output1$Longitude[7]))
#pos2 = (c(output1$Latitude[8],output1$Longitude[8]))
#earthDist(Latitude[7],Longitude[7],Latitude[8],Longitude[8])
shipTrajectory(227006760,output1)
View(a)
install.packages("RgoogleMaps")
library(RgoogleMaps)
newmap <- getMap(resolution = "high")
plot(newmap,xlim = c(115, 182), ylim = c(30, 92), asp = 1)
points(a$Longitude,a$Latitude,col="red",cex=1,pch=20)
bb = qbbox(lat = a$Latitude,long = a$Longitude)
bb = qbbox(lat = a$Latitude,lon = a$Longitude)
map = GetMap.bbox(bb$lonR,bb$latR,destfile = "cartographie.png",maptype="hybrid")
PlotOnStaticMap(map,lat=a$Latitude,lon = a$Longitude,destfile = "cartographie.png",cex=2,pch=20)
>>>>>>> b424f88161884d503b3190214ef9dc77e1c631f2
setwd("C:/Users/Folco/Desktop/Isep - Exposé/Isep 5ème année/Projet codeR/RCodeMimitaryProject")
#set your working directory
#output=read.csv("output.txt", sep=",", header=FALSE)
#chargement du fichier
output=read.csv("outputtry.txt", sep=",", header=FALSE)
#création de la colonne NumberTypeMessage
output["NumberTypeMessage"]<- NA
#Nomenclature des différents types de messages
output$`NumberTypeMessage`[output$V1=="PositionReportClassAScheduled{messageType=PositionReportClassAScheduled}"]=1
output$`NumberTypeMessage`[output$V1=="PositionReportClassAResponseToInterrogation{messageType=PositionReportClassAResponseToInterrogation}"]=2
output$`NumberTypeMessage`[output$V1=="StandardClassBCSPositionReport{messageType=StandardClassBCSPositionReport"]=3
output$`NumberTypeMessage`[output$V1=="ShipAndVoyageData{messageType=ShipAndVoyageRelatedData"]=4
output$`NumberTypeMessage`[output$V1=="BaseStationReport{messageType=BaseStationReport"]=5
output$`NumberTypeMessage`[output$V1=="PositionReportClassAAssignedSchedule{messageType=PositionReportClassAAssignedSchedule}"]=6
output$`NumberTypeMessage`[output$V1=="AidToNavigationReport{messageType=AidToNavigationReport"]=7
output$`NumberTypeMessage`[output$V1=="ExtendedClassBEquipmentPositionReport{messageType=ExtendedClassBEquipmentPositionReport"]=8
output$`NumberTypeMessage`[output$V1=="DataLinkManagement{messageType=DataLinkManagement"]=9
output$`NumberTypeMessage`[output$V1=="BinaryBroadcastMessage{messageType=BinaryBroadcastMessage"]=10
output$`NumberTypeMessage`[output$V1=="GNSSBinaryBroadcastMessage{messageType=GNSSBinaryBroadcastMessage"]=11
output$`NumberTypeMessage`[output$V1=="AddressedBinaryMessage{messageType=AddressedBinaryMessage"]=12
output$`NumberTypeMessage`[output$V1=="UTCAndDateInquiry{messageType=UTCAndDateInquiry"]=13
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=14
output$`NumberTypeMessage`[output$V1=="StandardSARAircraftPositionReport{messageType=StandardSARAircraftPositionReport"]=15
output$`NumberTypeMessage`[output$V1=="ClassBCSStaticDataReport{messageType=ClassBCSStaticDataReport"]=16
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=17
output$`NumberTypeMessage`[output$V1=="UTCAndDateResponse{messageType=UTCAndDateResponse"]=18
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=19
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=20
output$`NumberTypeMessage`[output$V1=="ChannelManagement{messageType=ChannelManagement"]=21
output <- output[,c(39,1:38)]
#Tri par type
attach(output)
output1 = output[which(NumberTypeMessage == 1),]
output2 = output[which(NumberTypeMessage == 2),]
output3 = output[which(NumberTypeMessage == 3),]
output4 = output[which(NumberTypeMessage == 4),]
output5 = output[which(NumberTypeMessage == 5),]
output6 = output[which(NumberTypeMessage == 6),]
output7 = output[which(NumberTypeMessage == 7),]
output8 = output[which(NumberTypeMessage == 8),]
#traitement des colonnes par type de message
# pour les messages de type 1
output1$V2=gsub("^.*?=","", output1$V2)
output1$V3=gsub("^.*?=","", output1$V3)
output1$V4=gsub("^.*?=","", output1$V4)
output1$V5=gsub("^.*?=","", output1$V5)
output1$V6=gsub("^.*?=","", output1$V6)
output1$V7=gsub("^.*?=","", output1$V7)
output1$V8=gsub("^.*?=","", output1$V8)
output1$V9=gsub("^.*?=","", output1$V9)
output1$V10=gsub("^.*?=","", output1$V10)
output1$V11=gsub("^.*?=","", output1$V11)
output1$V12=gsub("^.*?=","", output1$V12)
output1$V20=gsub("^.*?=","", output1$V20)
output1$V21=gsub("^.*?=","", output1$V21)
output1$V22=gsub("^.*?=","", output1$V22)
output1$V23=gsub("[[:punct:][:lower:][:upper:]]","", output1$V23)
colnames(output1) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
output1 = output1[,-c(21,22,25:39)]
# pour les messages de type 2
output2$V2=gsub("^.*?=","", output2$V2)
output2$V3=gsub("^.*?=","", output2$V3)
output2$V4=gsub("^.*?=","", output2$V4)
output2$V5=gsub("^.*?=","", output2$V5)
output2$V6=gsub("^.*?=","", output2$V6)
output2$V7=gsub("^.*?=","", output2$V7)
output2$V8=gsub("^.*?=","", output2$V8)
output2$V9=gsub("^.*?=","", output2$V9)
output2$V10=gsub("^.*?=","", output2$V10)
output2$V11=gsub("^.*?=","", output2$V11)
output2$V12=gsub("^.*?=","", output2$V12)
output2$V20=gsub("^.*?=","", output2$V20)
output2$V21=gsub("^.*?=","", output2$V21)
output2$V22=gsub("^.*?=","", output2$V22)
output2$V23=gsub("[[:punct:][:lower:][:upper:]]","", output2$V23)
colnames(output2) <- c("NumberTypeMessage","MessageType", "NavigationStatus", "RateOfTurn", "SpeedOverGround", "PositionAccuracy", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Timestamp", "specialManeuverIndicator", "raimFlag", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB", "Data", "Data1", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
output2 = output2[,-c(21,22,25:39)]
# pour les messages de type 3
output3$V2=gsub("^.*?=","", output3$V2)
output3$V3=gsub("^.*?=","", output3$V3)
output3$V4=gsub("^.*?=","", output3$V4)
output3$V5=gsub("^.*?=","", output3$V5)
output3$V6=gsub("^.*?=","", output3$V6)
output3$V7=gsub("^.*?=","", output3$V7)
output3$V8=gsub("^.*?=","", output3$V8)
output3$V9=gsub("^.*?=","", output3$V9)
output3$V10=gsub("^.*?=","", output3$V10)
output3$V11=gsub("^.*?=","", output3$V11)
output3$V12=gsub("^.*?=","", output3$V12)
output3$V13=gsub("^.*?=","", output3$V13)
output3$V14=gsub("^.*?=","", output3$V14)
output3$V15=gsub("^.*?=","", output3$V15)
output3$V16=gsub("^.*?=","", output3$V16)
output3$V17=gsub("^.*?=","", output3$V17)
output3$V18=gsub("^.*?=","", output3$V18)
output3$V19=gsub("^.*?=","", output3$V19)
output3$V20=gsub("^.*?=","", output3$V20)
output3$V27=gsub("^.*?=","", output3$V27)
output3$V28=gsub("^.*?=","", output3$V28)
output3$V29=gsub("^.*?=","", output3$V29)
output3$V30=gsub("[[:punct:][:lower:][:upper:]]","", output3$V30)
colnames(output3) <- c("NumberTypeMessage","MessageType", "RegionalReserved1", "SpeedOverGround", "PositionAccurate", "Latitude", "Longitude", "CourseOverGround", "TrueHeading", "Second", "RegionalReserved2", "CsUnit", "display", "dsc", "band", "message22", "assigned", "raimFlag", "commStateSelectorFlag", "commState", "AISMessage", "SyncState", "SlotTime-out", "Undefined", "AB","Data","Data1","Metadata", "Received","repeatIndicator", "sourceMmsi")
output3 = output3[,-c(28,29)]
# pour les messages de type 4
output4$V2=gsub("^.*?=","", output4$V2)
output4$V3=gsub("^.*?=","", output4$V3)
output4$V4=gsub("^.*?=","", output4$V4)
output4$V5=gsub("^.*?=","", output4$V5)
output4$V6=gsub("^.*?=","", output4$V6)
output4$V7=gsub("^.*?=","", output4$V7)
output4$V8=gsub("^.*?=","", output4$V8)
output4$V9=gsub("^.*?=","", output4$V9)
output4$V10=gsub("^.*?=","", output4$V10)
output4$V11=gsub("^.*?=","", output4$V11)
output4$V12=gsub("^.*?=","", output4$V12)
output4$V13=gsub("^.*?=","", output4$V13)
output4$V14=gsub("^.*?=","", output4$V14)
output4$V15=gsub("^.*?=","", output4$V15)
output4$V29=gsub("^.*?=","", output4$V29)
output4$V30=gsub("^.*?=","", output4$V30)
output4$V31=gsub("^.*?=","", output4$V31)
output4$V32=gsub("[[:punct:][:lower:][:upper:]]","", output4$V32)
colnames(output4) <- c("NumberTypeMessage","MessageType", "imo", "callsign", "shipname", "shipType","toBow","toStern","toStarboard","toPort","positionFixingDevice","eta","draught","destination","dataTerminalReady","", "", "", "", "", "", "","", "", "", "", "", "", "", "Metadata", "Received", "repeatIndicator", "sourceMmsi")
#new_DF <- output[rowSums(is.na(output)) > 0,] #A compléter pour numbertypemessage
output1$Timestamp=as.numeric(output1$Timestamp)
output1$sourceMmsi=as.numeric(output1$sourceMmsi)
output1$Latitude = as.numeric(output1$Latitude)
output1$Longitude = as.numeric(output1$Longitude)
attach(output1)
a = output1[which(output1$sourceMmsi == 227006760),]
#a = a[order(a$Timestamp),]
#Calculate Distance from  Latitude and Longitude
#library(geosphere)
#pos1 = (c(output1$Latitude[7],output1$Longitude[7]))
#pos2 = (c(output1$Latitude[8],output1$Longitude[8]))
#earthDist(Latitude[7],Longitude[7],Latitude[8],Longitude[8])
shipTrajectory(227006760,output1)
#install.packages("rworldmap")
#install.packages("rworldxtra")
library(rworldmap)
library(rworldxtra)
bb = qbbox(lat = a$Latitude,lon = a$Longitude)
map = GetMap.bbox(bb$lonR,bb$latR,destfile = "cartographie.png",maptype="hybrid")
PlotOnStaticMap(map,lat=a$Latitude,lon = a$Longitude,destfile = "cartographie.png",cex=2,pch=20)
newmap <- getMap(resolution = "high")
plot(newmap,xlim = c(115, 182), ylim = c(30, 92), asp = 1)
points(a$Longitude,a$Latitude,col="red",cex=1,pch=20)
trajectoryboat = c(sourceMmsi,Trajectory value)
trajectoryboat = c(sourceMmsi,Trajectoryvalue)
trajectoryboat = c(sourceMmsi, shipTrajectory(227006760,output1))
trajectoryboat = c("sourceMmsi", "shipTrajectory(227006760,output1)")
trajectoryboat = output1(sourceMmsi, shipTrajectory(227006760,output1))
trajectoryboat = output1[(sourceMmsi, shipTrajectory(227006760,output1))]
trajectoryboat = c(sourceMmsi, shipTrajectory(227006760,output1))
View(output1)
boatposition <-output1[,c(22,7,8)]
View(boatposition)
write.table(shipTrajectory(227006760,output1),"test.txt",sep="\t",row.names=FALSE)
write.table(shipTrajectory(227006760,output1),"test.txt",sep="",row.names=FALSE)
b=shipTrajectory(227006760,output1)
earthDist <- function (lat1,long1,lat2,long2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
shipTrajectory <- function (shipId,dataset){
x <- shipId
#dataset <- read.csv(dataFile,sep=",", header=TRUE)
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
boatPosition = dt[which(dt$sourceMmsi == x),]
attach(boatPosition)
for (i in 1:(length(boatPosition)-1)){
lat1 = boatPosition$Latitude[i]
long1 = boatPosition$Longitude[i]
lat2 = boatPosition$Latitude[i+1]
long2 = boatPosition$Longitude[i+1]
i <- i + 1
print(earthDist(lat1,long1,lat2,long2))
}
}
b=shipTrajectory(227006760,output1)
shipTrajectory <- function (shipId,dataset){
x <- shipId
#dataset <- read.csv(dataFile,sep=",", header=TRUE)
dt = dataset
dt$Latitude = as.double(dt$Latitude)
dt$Longitude = as.double(dt$Longitude)
boatPosition = dt[which(dt$sourceMmsi == x),]
attach(boatPosition)
for (i in 1:(length(boatPosition)-1)){
lat1 = boatPosition$Latitude[i]
long1 = boatPosition$Longitude[i]
lat2 = boatPosition$Latitude[i+1]
long2 = boatPosition$Longitude[i+1]
i <- i + 1
print(earthDist(lat1,long1,lat2,long2))
}
return(earthDist(lat1,long1,lat2,long2))
}
earthDist <- function (lat1,long1,lat2,long2)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)
}
b=shipTrajectory(227006760,output1)
write.table(b,"test.txt",sep="",row.names=FALSE)
boatposition <-output1[,c(22,7,8)]
View(boatposition)
boatposition[order(rank(sourceMmsi),)]
boatposition[order(rank(sourceMmsi), y)]
boatposition[order(rank(sourceMmsi), Latitude, Longitude)]
boatposition[order(rank(sourceMmsi),Latitude)]
sort(boatposition$sourceMmsi)
View(boatposition)
boatposition[sort(boatposition$sourceMmsi)]
View(boatposition)
attach(boatposition)
boatposition[sort(boatposition$sourceMmsi)]
